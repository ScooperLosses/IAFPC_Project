package com.example.dijkstraproject;

public class RoyWarshell {
    public static class FloydWarshallClass {
        private final int INF = 99999;
        private int[][] graph;

        // Intializarea
        public void initializeGraph(int nodes) {
            graph = new int[nodes][nodes];
            for (int i = 0; i < nodes; i++) {
                for (int j = 0; j < nodes; j++) {
                    if (i == j) {
                        graph[i][j] = 0;
                    } else {
                        graph[i][j] = INF;
                    }
                }
            }
        }

        // Adaugam Muchia
        public void addEdge(int start, int end, int weight) {
            graph[start][end] = weight;
            graph[end][start] = weight;
        }

        // Algoritmul Floyd-Warshall
        public int[][] runFloydWarshall() {
            int V = graph.length;
            int[][] dist = new int[V][V];

            for (int i = 0; i < V; i++) {
                System.arraycopy(graph[i], 0, dist[i], 0, V);
            }

            for (int k = 0; k < V; k++) {
                for (int i = 0; i < V; i++) {
                    for (int j = 0; j < V; j++) {
                        if (dist[i][k] != INF && dist[k][j] != INF && dist[i][k] + dist[k][j] < dist[i][j]) {
                            dist[i][j] = dist[i][k] + dist[k][j];
                        }
                    }
                }
            }
            return dist;
        }
    }
}
