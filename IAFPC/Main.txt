package com.example.dijkstraproject;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

import java.util.*;

public class HelloApplication extends Application {
    private final List<Map<Integer, Integer>> graph = new ArrayList<>();
    private final RoyWarshell.FloydWarshallClass floydWarshall = new RoyWarshell.FloydWarshallClass();
    private final TextArea resultArea = new TextArea();
    private final Canvas canvas = new Canvas(500, 250);

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        VBox root = new VBox();
        Scene scene = new Scene(root, 1000, 600);

        TextField nodeCountField = new TextField();
        nodeCountField.setPromptText("Introduceti numarul nodurilor: ");
        Button createGraphButton = new Button("Creati graful");

        createGraphButton.setOnAction(e -> {
            try {
                int nodeCount = Integer.parseInt(nodeCountField.getText());
                initializeGraph(nodeCount);
                drawGraph();
                floydWarshall.initializeGraph(nodeCount);
            } catch (NumberFormatException ex) {
                System.out.println("Error: Introduceti numere/cifre.");
            }
        });

        TextField edgeInputField = new TextField();
        edgeInputField.setPromptText("Introduceti muchia (exemplu: start, end, ponderea)");

        Button addEdgeButton = new Button("Adauga muchia");
        addEdgeButton.setOnAction(e -> {
            String[] edgeData = edgeInputField.getText().split(" ");
            int start = Integer.parseInt(edgeData[0]) - 1;
            int end = Integer.parseInt(edgeData[1]) - 1;
            int weight = Integer.parseInt(edgeData[2]);
            addEdge(start, end, weight);
            drawGraph();
            floydWarshall.addEdge(start, end, weight);
        });

        TextField startNodeField = new TextField();
        startNodeField.setPromptText("Introduceti punctul start: ");

        Button runDijkstraButton = new Button("Go (Dijkstra)");
        runDijkstraButton.setOnAction(e -> {
            int startNode = Integer.parseInt(startNodeField.getText()) - 1;
            int[] distancesDijkstra = DijkstraClass.runDijkstra(startNode, graph);
            displayResultsDijkstra(distancesDijkstra, startNode);
        });

        Button runFloydWarshallButton = new Button("Go (Floyd-Warshall)");
        runFloydWarshallButton.setOnAction(e -> {
            int[][] distancesFloyd = floydWarshall.runFloydWarshall();
            displayResultsFloydWarshall(distancesFloyd);
        });

        resultArea.setEditable(false);

        root.getChildren().addAll(nodeCountField, createGraphButton, edgeInputField, addEdgeButton, startNodeField, runDijkstraButton, runFloydWarshallButton, resultArea, canvas);

        primaryStage.setScene(scene);
        primaryStage.setTitle("Algoritmii Dijkstra si Floyd-Warshall");
        primaryStage.show();
    }

    // Initializam graful
    private void initializeGraph(int nodes) {
        graph.clear();
        for (int i = 0; i < nodes; i++) {
            graph.add(new HashMap<>());
        }
    }

    // Adaugam muchia in graf
    private void addEdge(int start, int end, int weight) {
        graph.get(start).put(end, weight);
        graph.get(end).put(start, weight);
    }

    // Desenarea grafului
    private void drawGraph() {
        GraphicsContext gc = canvas.getGraphicsContext2D();
        gc.clearRect(0, 0, canvas.getWidth(), canvas.getHeight());

        int nodeCount = graph.size();
        double radius = 1.5;
        double centerX = canvas.getWidth() / 2;
        double centerY = canvas.getHeight() / 2;

        for (int i = 0; i < nodeCount; i++) {
            double angle = 2 * Math.PI * i / nodeCount;
            double x = centerX + Math.cos(angle) * 100;
            double y = centerY + Math.sin(angle) * 100;

            gc.setFill(Color.BLACK);
            gc.fillOval(x - radius, y - radius, radius * 2, radius * 2);
            gc.fillText(String.valueOf(i + 1), x, y);

            for (Map.Entry<Integer, Integer> entry : graph.get(i).entrySet()) {
                int neighbor = entry.getKey();
                double neighborX = centerX + Math.cos(2 * Math.PI * neighbor / nodeCount) * 100;
                double neighborY = centerY + Math.sin(2 * Math.PI * neighbor / nodeCount) * 100;

                gc.strokeLine(x, y, neighborX, neighborY);
            }
        }
    }

    // Printarea Dijkstra
    private void displayResultsDijkstra(int[] distances, int startNode) {
        StringBuilder sb = new StringBuilder();
        sb.append("Dinstanta minimala (Dijkstra) de la nodul ").append(startNode + 1).append(":\n");
        for (int i = 0; i < distances.length; i++) {
            sb.append("Pana la nodul ").append(i + 1).append(": ")
                    .append(distances[i] == Integer.MAX_VALUE ? "∞" : distances[i])
                    .append("\n");
        }
        resultArea.setText(sb.toString());
    }

    // Printarea Floyd-Warshall
    private void displayResultsFloydWarshall(int[][] distances) {
        StringBuilder sb = new StringBuilder();
        sb.append("Matricea distanțelor minime (Floyd-Warshall):\n");
        for (int[] distance : distances) {
            for (int i : distance) sb.append(i == 99999 ? "∞" : i).append("\t");
            sb.append("\n");
        }
        resultArea.setText(sb.toString());
    }
}
